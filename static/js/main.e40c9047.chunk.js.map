{"version":3,"sources":["utils/classname.js","components/input/index.jsx","components/tasklist/index.jsx","components/hooks/use-onenterkeypress.js","components/timerview/timer/index.js","components/timerview/index.jsx","components/tasklist/tasklist-drawer.jsx","components/tasklist/container.jsx","utils/timer.js","components/hooks/use-timer.js","components/hooks/usebeforeunload.js","utils/tasks.js","components/hooks/use-tasks.js","App.js","components/hooks/use-form-field.js","components/hooks/use-pagewidth.js","serviceWorkerRegistration.js","index.js"],"names":["joinClassname","baseName","className","trim","join","TheInput","props","joinedClassname","TaskList","callback","tasks","addTaskValue","onChangeAddTaskValue","onSubmit","onDeleteTask","onEnterKeyPress","event","code","preventDefault","placeholder","onKeyDown","onChange","value","type","onClick","disabled","map","task","name","id","padNumberWithZeros","number","numZeros","toString","padStart","secondsToTimeString","seconds","hours","Math","floor","minutes","remainingSeconds","Timer","currentTimeInSeconds","TimerView","currentTask","isTaskCompleted","onConfirmCompleteTask","onPauseResume","areThereAnyTasks","isTimerPaused","TaskListDrawer","children","useState","isVisible","setVisibility","TaskListContainier","width","useTimer","getNumberOfTasks","timer","Number","parseInt","localStorage","getItem","isNaN","loadTimer","timeInSeconds","setCurrentTimeInSeconds","setIsTimerPaused","useEffect","setTimeout","clearTimeout","listener","setItem","window","addEventListener","removeEventListener","resetTimer","saveTasks","JSON","stringify","useTasks","rawField","parse","error","console","log","loadTasks","setTasks","addNewTask","taskName","taskArray","newTaskArray","length","removeFirstTask","removeTaskById","taskId","filter","App","defaultValue","emptyValue","setValue","target","clear","useFormField","onChangeTaskname","clearTaskName","innerWidth","setWidth","handleWindowResize","usePageWidth","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e40c9047.chunk.js","sourcesContent":["export const joinClassname = (baseName, className) => {\n  if (typeof className != \"string\" || className.trim() === \"\") {\n    return baseName;\n  }\n\n  return [baseName, className].join(\" \");\n};\n","import { joinClassname } from \"../../utils/classname\";\nimport \"./input.css\";\n\nexport default function TheInput({ className = \"\", ...props }) {\n  const joinedClassname = joinClassname(\"input\", className);\n\n  return <input className={joinedClassname} {...props} />;\n}\n","import { useOnEnterKeyPress } from \"../hooks/use-onenterkeypress\";\nimport TheInput from \"../input\";\nimport \"./tasklist.css\";\n\nexport default function TaskList({\n  tasks,\n  addTaskValue,\n  onChangeAddTaskValue,\n  onSubmit,\n  onDeleteTask,\n}) {\n  const onEnterKeyPress = useOnEnterKeyPress(onSubmit);\n\n  return (\n    <div className=\"tasklist-container\">\n      <div className=\"tasklist\">\n        <div>\n          <TheInput\n            placeholder=\"Task name\"\n            onKeyDown={onEnterKeyPress}\n            onChange={onChangeAddTaskValue}\n            value={addTaskValue}\n          />\n          <button\n            type=\"button\"\n            onClick={onSubmit}\n            disabled={addTaskValue === \"\"}\n          >\n            Add Task\n          </button>\n        </div>\n        {tasks.map((task) => {\n          return (\n            <div className=\"tasklist-item\" key={task.id}>\n              {task.name}\n              <button\n                className=\"delete-task-btn\"\n                type=\"button\"\n                onClick={() => onDeleteTask(task.id)}\n              >\n                X\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","export const useOnEnterKeyPress = (callback) => (event) => {\n  if (event.code === \"Enter\") {\n    event.preventDefault();\n    callback();\n  }\n};\n","import \"./timer.css\";\n\nconst padNumberWithZeros = (number, numZeros = 2) => {\n  return number.toString().padStart(numZeros, 0);\n};\n\nconst secondsToTimeString = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds - hours * 3600) / 60);\n  const remainingSeconds = seconds - hours * 3600 - minutes * 60;\n\n  return `${padNumberWithZeros(hours)}:${padNumberWithZeros(\n    minutes\n  )}:${padNumberWithZeros(remainingSeconds)}`;\n};\n\nexport default function Timer({ currentTimeInSeconds }) {\n  return (\n    <div className=\"timer timer_view__timer\">\n      <div className=\"timer_value\">\n        {secondsToTimeString(currentTimeInSeconds)}\n      </div>\n    </div>\n  );\n}\n","import Timer from \"./timer\";\nimport \"./timerview.css\";\n\nexport default function TimerView({\n  currentTask = null,\n  isTaskCompleted,\n  onConfirmCompleteTask,\n  onPauseResume,\n  currentTimeInSeconds,\n  areThereAnyTasks,\n  isTimerPaused,\n}) {\n  return (\n    <div className=\"timer_view\">\n      {currentTask && <h1 className=\"timer_view__name\">{currentTask}</h1>}\n      <Timer currentTimeInSeconds={currentTimeInSeconds} />\n\n      {!areThereAnyTasks && <div>Add a task to begin using the app.</div>}\n\n      {isTaskCompleted &&\n        areThereAnyTasks && [\n          <div>Add more time, or trasition to the next task</div>,\n          <button onClick={onConfirmCompleteTask}>Next Task!</button>,\n        ]}\n      {areThereAnyTasks && (\n        <div className=\"timer_view__controls\">\n          <button type=\"button\" onClick={onPauseResume}>\n            {isTimerPaused ? \"Resume\" : \"Pause\"}\n          </button>\n          <button type=\"button\" onClick={onConfirmCompleteTask}>\n            Finish Task\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { joinClassname } from \"../../utils/classname\";\n\nexport default function TaskListDrawer({ children }) {\n  const [isVisible, setVisibility] = useState(false);\n  const drawerState = isVisible ? \"drawer--open\" : \"\";\n  const className = joinClassname(\"drawer\", drawerState);\n  const showDrawer = () => setVisibility(true);\n  const closeDrawer = () => setVisibility(false);\n\n  return (\n    <>\n      <button className=\"show-tasklist-btn\" onClick={showDrawer}>\n        Show task list\n      </button>\n      <div className={className}>\n        <button className=\"close-tasklist-drawer\" onClick={closeDrawer}>\n          Close Task list\n        </button>\n        {children}\n      </div>\n    </>\n  );\n}\n","import TaskListDrawer from \"./tasklist-drawer\";\n\nconst DUAL_VIEW_THRESHOLD = 800;\n\nexport default function TaskListContainier({ width, children }) {\n  return (\n    <>\n      {width >= DUAL_VIEW_THRESHOLD ? (\n        <div className=\"taskview\">{children}</div>\n      ) : (\n        <TaskListDrawer>{children}</TaskListDrawer>\n      )}\n    </>\n  );\n}\n","export const saveTimer = (currentTimeInSeconds) => {\n  localStorage.setItem(\"timer\", currentTimeInSeconds.toString());\n};\n\nexport const loadTimer = () => {\n  const timer = Number.parseInt(localStorage.getItem(\"timer\"));\n  if (Number.isNaN(timer)) {\n    return 1800;\n  }\n  return timer;\n};\n","import { useEffect, useState } from \"react\";\nimport { loadTimer, saveTimer } from \"../../utils/timer\";\nimport { useBeforeUnload } from \"./usebeforeunload\";\n\nexport const useTimer = (getNumberOfTasks) => {\n  const [timeInSeconds, setCurrentTimeInSeconds] = useState(loadTimer());\n  const [isTimerPaused, setIsTimerPaused] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(\n      () =>\n        timeInSeconds > 0 &&\n        getNumberOfTasks() > 0 &&\n        !isTimerPaused &&\n        setCurrentTimeInSeconds(timeInSeconds - 1),\n      1000\n    );\n\n    return () => clearTimeout(timer);\n  });\n\n  const saveCurrentTime = () => saveTimer(timeInSeconds);\n  useBeforeUnload(saveCurrentTime);\n\n  const onPauseResume = () => {\n    setIsTimerPaused(!isTimerPaused);\n  };\n\n  const resetTimer = () => setCurrentTimeInSeconds(1800);\n\n  return {\n    timeInSeconds,\n    isTimerPaused,\n    onPauseResume,\n    resetTimer,\n  };\n};\n","import { useEffect } from \"react\";\n\nexport const useBeforeUnload = (listener) => {\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", listener);\n    return () => window.removeEventListener(\"beforeunload\", listener);\n  });\n};\n","export const loadTasks = () => {\n  try {\n    const rawField = localStorage.getItem(\"tasks\");\n\n    if (rawField == null || rawField.trim() === \"\") {\n      return [];\n    }\n\n    const tasks = JSON.parse(rawField);\n    return tasks;\n  } catch (error) {\n    console.log(error);\n    return [];\n  }\n};\n\nexport const saveTasks = (tasks) => {\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n};\n","import { useState } from \"react\";\nimport { loadTasks, saveTasks } from \"../../utils/tasks\";\n\nconst maxId = (taskArray) => {\n  if (taskArray.length === 0) {\n    return 0;\n  }\n\n  return taskArray[taskArray.length - 1].id;\n};\n\nexport const useTasks = () => {\n  const [tasks, setTasks] = useState(loadTasks());\n\n  const addNewTask = (taskName) => {\n    const newTaskArray = [...tasks, { name: taskName, id: maxId(tasks) + 1 }];\n\n    setTasks(newTaskArray);\n    saveTasks(newTaskArray);\n  };\n\n  const removeFirstTask = () => {\n    const [, ...newTaskArray] = tasks;\n    setTasks(newTaskArray);\n    saveTasks(newTaskArray);\n  };\n\n  const removeTaskById = (taskId) => {\n    const newTaskArray = tasks.filter((task) => task.id !== taskId);\n    setTasks(newTaskArray);\n    saveTasks(newTaskArray);\n  };\n\n  return { tasks, addNewTask, removeFirstTask, removeTaskById };\n};\n","import TaskList from \"./components/tasklist\";\nimport TimerView from \"./components/timerview\";\nimport { usePageWidth } from \"./components/hooks/use-pagewidth\";\nimport TaskListContainier from \"./components/tasklist/container\";\nimport { useTimer } from \"./components/hooks/use-timer\";\nimport { useFormField } from \"./components/hooks/use-form-field\";\nimport { useTasks } from \"./components/hooks/use-tasks\";\nimport \"./App.css\";\n\nfunction App() {\n  const { tasks, addNewTask, removeFirstTask, removeTaskById } = useTasks();\n\n  const {\n    value: taskName,\n    onChange: onChangeTaskname,\n    clear: clearTaskName,\n  } = useFormField();\n\n  const { width } = usePageWidth();\n\n  const getNumberOfTasks = () => tasks.length;\n\n  const { timeInSeconds, isTimerPaused, onPauseResume, resetTimer } =\n    useTimer(getNumberOfTasks);\n\n  const onSubmit = () => {\n    if (tasks.length === 0) {\n      resetTimer();\n    }\n\n    addNewTask(taskName);\n    clearTaskName();\n  };\n\n  const popAndMoveOn = () => {\n    removeFirstTask();\n    resetTimer();\n  };\n\n  const onDeleteTask = (taskId) => {\n    if (tasks[0].id === taskId) {\n      resetTimer();\n    }\n\n    removeTaskById(taskId);\n  };\n\n  return (\n    <div className=\"App\">\n      <TimerView\n        currentTimeInSeconds={timeInSeconds}\n        isTaskCompleted={timeInSeconds === 0}\n        areThereAnyTasks={tasks.length > 0}\n        onConfirmCompleteTask={popAndMoveOn}\n        onPauseResume={onPauseResume}\n        isTimerPaused={isTimerPaused}\n        currentTask={tasks[0] == null ? null : tasks[0].name}\n      />\n\n      <TaskListContainier width={width}>\n        <TaskList\n          tasks={tasks}\n          onSubmit={onSubmit}\n          addTaskValue={taskName}\n          onChangeAddTaskValue={onChangeTaskname}\n          onDeleteTask={onDeleteTask}\n        />\n      </TaskListContainier>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport const useFormField = (defaultValue = \"\", emptyValue = \"\") => {\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const clear = () => {\n    setValue(emptyValue);\n  };\n\n  return { value, onChange, clear };\n};\n","import { useEffect, useState } from \"react\";\n\nexport const usePageWidth = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n  const handleWindowResize = () => setWidth(window.innerWidth);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  });\n\n  return { width };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}